// File generated using battery-embed (https://github.com/batterycenter/embed)
// Embedded file: {{ resource_path }} as '{{ full_identifier }}' | filesize: {{ resource_size }} bytes | was embedded as binary: {{ is_binary }}
// Source file containing the embedded data: {{ identifier }}.cpp
// DO NOT EDIT THIS FILE!!!

#ifndef __embed_{{identifier}}_
#define __embed_{{identifier}}_

#include <cinttypes>
#include <string>
#include <sstream>
#include <vector>

{% for header in additional_header_files %}#include <{{ header }}>
{% endfor %}
namespace EmbedInternal {

    class {{identifier}}_t {
    public:
        {{identifier}}_t() = default;

        inline const std::string& str() const { 
            return m_data; 
        }
        
        inline const char* data() const { 
            return m_data.data(); 
        }

        inline std::vector<uint8_t> vec() const {
            return std::vector<uint8_t>(m_data.begin(), m_data.end());
        }

        inline size_t size() const {
            return m_data.size();
        }

        inline bool isBinary() const { 
            return m_isBinary; 
        }

        inline operator std::string() {
            return str();
        }

        inline operator std::vector<uint8_t>() {
            return vec();
        }
{% for string_class in additional_string_classes %}
        inline operator {{ string_class }}() {
            return {{ string_class }}(str());
        }
{% endfor %}
{% for operator in additional_operators %}
        {{ operator }}
{% endfor %}
#ifndef B_PRODUCTION_MODE
        inline std::string original_filepath() const { return m_filepath; }
#endif

    private:
        static const std::string m_data;
        static const bool m_isBinary;

#ifndef B_PRODUCTION_MODE
        static const std::string m_filepath;
#endif
    };
    inline std::ostream& operator<<(std::ostream& os, const {{identifier}}_t& data) { os << data.str(); return os; }

} // namespace EmbedInternal

namespace Embed{{identifier_namespaces}} {
    inline EmbedInternal::{{identifier}}_t {{file_identifier}};
}

#endif // __embed_{{identifier}}_
