// File generated using battery_embed. https://github.com/batterycenter/battery
// Embedded file: C:/Users/zachs/Projects/battery/examples/core/BatteryEmbed/resources/banner.txt | filesize: 479 bytes | was embedded as binary: false
// Source file containing the data: banner_txt.cpp
// DO NOT EDIT THIS FILE!!!

#ifndef __battery_embed_banner_txt_
#define __battery_embed_banner_txt_

#include <cinttypes>
#include <iostream>
#include <vector>
#include "battery/core/resource.hpp"
#include "battery/core/string.hpp"
#include "battery/core/fs.hpp"

namespace ResourcesInternal {

#ifndef B_PRODUCTION_MODE
    extern const char* const RESOURCE_banner_txt_FILEPATH;
    extern const bool RESOURCE_banner_txt_IS_BINARY;
#endif

    extern const size_t RESOURCE_banner_txt_SIZE;
    extern const uint8_t RESOURCE_banner_txt_DATA[];

    class banner_txt_t {
    public:
        banner_txt_t() = default;

        inline b::string string() const {
            return std::string({ reinterpret_cast<const char*>(RESOURCE_banner_txt_DATA), RESOURCE_banner_txt_SIZE });
        }

        inline const char* data() const {
            return reinterpret_cast<const char*>(RESOURCE_banner_txt_DATA);
        }

        inline operator b::string() {
            return string();
        }

        inline std::vector<uint8_t> vec() const {
            return { RESOURCE_banner_txt_DATA, RESOURCE_banner_txt_DATA + RESOURCE_banner_txt_SIZE };
        }

        inline operator std::vector<uint8_t>() {
            return vec();
        }

#ifndef B_PRODUCTION_MODE
        inline b::fs::path filepath() const {
            return RESOURCE_banner_txt_FILEPATH;
        }

        inline bool isBinary() const {
            return RESOURCE_banner_txt_IS_BINARY;
        }
#endif

        inline operator b::Resource() {
            return b::Resource::FromByteString(string());
        }

        inline size_t size() const {
            return string().size();
        }
    };
    inline std::ostream& operator<<(std::ostream& os, const banner_txt_t& data) { os << data.string(); return os; }

} // namespace ResourcesInternal

namespace Resources {
    inline ResourcesInternal::banner_txt_t banner_txt;
}

#endif // __battery_embed_banner_txt_
